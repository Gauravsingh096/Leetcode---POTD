1190.
Reverse Substrings Between Each Pair of Parentheses


You are given a string s that consists of lower case English letters and brackets.
Reverse the strings in each pair of matching parentheses, starting from the innermost one.
Your result should not contain any brackets.

 
Example 1:
Input: s = "(abcd)"
Output: "dcba"


Example 2:
Input: s = "(u(love)i)"
Output: "iloveu"
Explanation: The substring "love" is reversed first, then the whole string is reversed.


Approach:


1. Initialization:
A stack is initialized to help with the processing of characters and parentheses.
Iteration through the string:

2. Each character in the input string s is processed one by one.
If the character is a closing parenthesis ), the goal is to reverse the substring within the nearest pair of parentheses.
If the character is not a closing parenthesis, it is simply added to the stack.
Handling closing parenthesis ):

3. When a closing parenthesis ) is encountered:
An empty list curr is initialized to temporarily store the characters that will be reversed.
Characters are popped from the stack and added to curr until an opening parenthesis ( is found. This effectively extracts the substring within the parentheses.
The opening parenthesis ( is then popped from the stack.
The characters in curr (which are now in reverse order) are pushed back onto the stack.
Constructing the result:

4. After processing all characters in the input string, the characters remaining in the stack are concatenated to form the final result.


Solution:

class Solution:
    def reverseParentheses(self, s: str) -> str:
        stack = []
        for char in s:
            if char == ')':
                curr = []
                while stack and stack[-1] != '(':
                    curr.append(stack.pop())
                stack.pop()  
                for item in curr:
                    stack.append(item)
            else:
                stack.append(char)
        return ''.join(stack)
